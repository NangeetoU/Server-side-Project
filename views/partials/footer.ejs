<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {

        // ==========================================================
        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Profile Modal
        // ==========================================================
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
            profileForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const formData = new FormData(profileForm);
                const data = Object.fromEntries(formData.entries());

                if (!data.password) {
                    delete data.password;
                    delete data.confirmPassword;
                }

                try {
                    const response = await fetch('/users/me', {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    if (!response.ok) {
                        const errorResult = await response.json();
                        throw new Error(errorResult.error || 'Failed to update profile.');
                    }
                    const updatedUser = await response.json();

                    document.querySelector('.user-name-v2').textContent = `${updatedUser.first_name} ${updatedUser.last_name}`;
                    document.querySelector('.user-email-v2').textContent = updatedUser.email;
                    document.querySelector('.welcome-title').textContent = `Welcome back, ${updatedUser.first_name} üëã`;

                    const profileModal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
                    profileModal.hide();
                    alert('Profile updated successfully!');
                } catch (error) {
                    console.error('Error updating profile:', error);
                    alert(`Error: ${error.message}`);
                }
            });
        }

        // ==========================================================
        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Task Status
        // ==========================================================
        const mainContent = document.querySelector('.main-content-v2');
        if (mainContent) {
            mainContent.addEventListener('click', async (event) => {
                const target = event.target.closest('.dropdown-item[data-task-id]');
                if (!target) return;

                event.preventDefault();
                const taskId = target.dataset.taskId;
                const newStatus = target.dataset.status;

                try {
                    const response = await fetch(`/tasks/${taskId}/status`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: newStatus })
                    });
                    if (!response.ok) {
                        const errorResult = await response.json();
                        throw new Error(errorResult.error || 'Failed to update task status.');
                    }
                    alert('Task status updated!');
                    location.reload();
                } catch (error) {
                    console.error('Error updating task status:', error);
                    alert(`Error: ${error.message}`);
                }
            });
        }

        // ==========================================================
        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Add Task Form
        // ==========================================================
        const addTaskForm = document.getElementById('addTaskForm');
        if (addTaskForm) {
            addTaskForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const formData = new FormData(addTaskForm);
                const data = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch('/tasks', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    if (!response.ok) {
                        const errorResult = await response.json();
                        throw new Error(errorResult.error || 'Failed to create task.');
                    }
                    const newTask = await response.json();
                    const taskElement = createTaskElement(newTask);

                    const todoList = document.querySelector('.to-do-card .card-body');
                    const emptyTaskEl = todoList.querySelector('.empty-task');
                    if (emptyTaskEl) emptyTaskEl.remove();

                    todoList.prepend(taskElement);

                    if (window.FontAwesome) {
                        FontAwesome.dom.i2svg();
                    }

                    const addTaskModal = bootstrap.Modal.getInstance(document.getElementById('addTaskModal'));
                    addTaskModal.hide();
                    addTaskForm.reset();
                } catch (error) {
                    console.error('Error creating task:', error);
                    alert(`Error: ${error.message}`);
                }
            });
        }

        /**
         * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á HTML element ‡∏Ç‡∏≠‡∏á Task
         */
        function createTaskElement(task) {
            const div = document.createElement('div');
            div.className = 'task-item';
            div.id = `task-item-${task.task_id}`;

            // --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status, Priority, ‡πÅ‡∏•‡∏∞ Date ---
            let statusText = 'Not Started';
            let statusClass = 'not-started';
            if (task.status === 'IN_PROGRESS') {
                statusText = 'In Progress';
                statusClass = 'in-progress';
            } else if (task.status === 'COMPLETED') {
                statusText = 'Completed';
                statusClass = 'completed';
            }

            let priorityClass = 'low';
            if (task.priority === 'MODERATE') priorityClass = 'moderate';
            if (task.priority === 'EXTREME') priorityClass = 'extreme';

            let dueDateHtml = '';
            if (task.due_at) {
                const formattedDate = new Date(task.due_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                dueDateHtml = `<div class="task-due-date"><i class="fas fa-calendar-alt"></i><span>${formattedDate}</span></div>`;
            }

            div.innerHTML = `
        <a href="/task/${task.task_id}" class="task-item-link">
            <div class="task-content">
                <span class="priority-indicator ${priorityClass}"></span>
                <div class="task-details">
                    <h4>${task.title}</h4>
                    <p>${task.description || ''}</p>
                </div>
            </div>
        </a>
        <div class="d-flex align-items-center">
            ${dueDateHtml}
            <span class="status-badge status-${statusClass}">${statusText}</span>
            <div class="task-actions">
                <div class="dropdown">
                    <button class="task-options-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" data-task-id="${task.task_id}" data-status="COMPLETED">Completed</a></li>
                        <li><a class="dropdown-item" href="#" data-task-id="${task.task_id}" data-status="IN_PROGRESS">In Progress</a></li>
                        <li><a class="dropdown-item" href="#" data-task-id="${task.task_id}" data-status="NOT_STARTED">Not Started</a></li>
                    </ul>
                </div>
            </div>
        </div>
    `;

            return div;
        }

        // ==========================================================
        // (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task Status Widget
        // ==========================================================


        function updateTaskStatusWidget(stats) {
            const total = (stats.NOT_STARTED || 0) + (stats.IN_PROGRESS || 0) + (stats.COMPLETED || 0);

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
            const completedPercent = total > 0 ? ((stats.COMPLETED || 0) / total) * 100 : 0;
            const inProgressPercent = total > 0 ? ((stats.IN_PROGRESS || 0) / total) * 100 : 0;
            const notStartedPercent = total > 0 ? ((stats.NOT_STARTED || 0) / total) * 100 : 0;

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á 'Completed'
            const completedCircle = document.querySelector('.circle.completed');
            if (completedCircle) {
                completedCircle.style.setProperty('--p', completedPercent);
                completedCircle.querySelector('.inside-circle').textContent = `${Math.round(completedPercent)}%`;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á 'In Progress'
            const inProgressCircle = document.querySelector('.circle.in-progress');
            if (inProgressCircle) {
                inProgressCircle.style.setProperty('--p', inProgressPercent);
                inProgressCircle.querySelector('.inside-circle').textContent = `${Math.round(inProgressPercent)}%`;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á 'Not Started'
            const notStartedCircle = document.querySelector('.circle.not-started');
            if (notStartedCircle) {
                notStartedCircle.style.setProperty('--p', notStartedPercent);
                notStartedCircle.querySelector('.inside-circle').textContent = `${Math.round(notStartedPercent)}%`;
            }
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ taskStats ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å EJS
        if (typeof taskStats !== 'undefined') {
            updateTaskStatusWidget(taskStats);
        }


        // ==========================================================
        // (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Edit Task Modal
        // ==========================================================

        const editTaskModalEl = document.getElementById('editTaskModal');
        const editTaskForm = document.getElementById('editTaskForm');
        const editModal = new bootstrap.Modal(editTaskModalEl);

        // --- Logic ‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Task Item ---
        document.querySelector('.main-content-v2').addEventListener('click', async (event) => {
            // ‡∏´‡∏≤ task-item-link ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
            const taskLink = event.target.closest('.task-item-link');
            if (!taskLink) return;

            event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤

            // ‡∏î‡∏∂‡∏á task id ‡∏à‡∏≤‡∏Å href
            const taskId = taskLink.href.split('/').pop();

            try {
                // ‡∏¢‡∏¥‡∏á API ‡πÑ‡∏õ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Task ‡∏ô‡∏µ‡πâ
                const response = await fetch(`/tasks/${taskId}`);
                if (!response.ok) throw new Error('Task not found.');

                const taskData = await response.json();

                // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á Edit Modal
                editTaskForm.querySelector('[name="task_id"]').value = taskData.task_id;
                editTaskForm.querySelector('[name="title"]').value = taskData.title;
                editTaskForm.querySelector('[name="description"]').value = taskData.description;
                // ‡πÅ‡∏õ‡∏•‡∏á Format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input type="date"
                editTaskForm.querySelector('[name="due_date"]').value = new Date(taskData.due_at).toISOString().split('T')[0];
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Radio button ‡∏Ç‡∏≠‡∏á priority ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                editTaskForm.querySelector(`[name="priority"][value="${taskData.priority}"]`).checked = true;

                // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
                editModal.show();

            } catch (error) {
                console.error('Error fetching task data:', error);
                alert(error.message);
            }
        });

        // --- Logic ‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "Save Changes" ‡πÉ‡∏ô Edit Modal ---
        editTaskForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(editTaskForm);
            const data = Object.fromEntries(formData.entries());
            const taskId = data.task_id;

            try {
                // ‡∏¢‡∏¥‡∏á API ‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task
                const response = await fetch(`/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (!response.ok) throw new Error('Failed to update task.');

                // ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                editModal.hide();
                alert('Task updated successfully!');
                location.reload();

            } catch (error) {
                console.error('Error updating task:', error);
                alert(error.message);
            }
        });

        // ==========================================================
        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 6: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Search & Filter (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô 'AND' Logic)
        // ==========================================================
        const searchForm = document.getElementById('searchForm');
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter'); // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ <select>
        const priorityFilter = document.getElementById('priorityFilter'); // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ <select>

        // --- Logic ‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search) - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const searchTerm = searchInput.value;
            if (searchTerm) {
                fetchAndRenderTasks(`/tasks/search?q=${encodeURIComponent(searchTerm)}`);
            } else {
                location.reload();
            }
        });

        // --- (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå ---
        function applyCombinedFilters() {
            // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö query parameters
            const params = new URLSearchParams();

            // 2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏≠‡∏±‡∏ô
            const statusValue = statusFilter.value;
            const priorityValue = priorityFilter.value;

            // 3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô params
            if (statusValue) {
                params.append('status', statusValue);
            }
            if (priorityValue) {
                params.append('priority', priorityValue);
            }

            // 4. ‡πÅ‡∏õ‡∏•‡∏á params ‡πÄ‡∏õ‡πá‡∏ô string (‡πÄ‡∏ä‡πà‡∏ô "status=IN_PROGRESS&priority=EXTREME")
            const queryString = params.toString();

            // 5. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            //    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á API
            if (queryString) {
                fetchAndRenderTasks(`/tasks/filter?${queryString}`);
            } else {
                location.reload();
            }
        }

        // --- Logic ‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (Filter) - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà ---
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dropdown ‡∏Ç‡∏≠‡∏á Status ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°
        statusFilter.addEventListener('change', applyCombinedFilters);

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dropdown ‡∏Ç‡∏≠‡∏á Priority ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
        priorityFilter.addEventListener('change', applyCombinedFilters);

        // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dropdown ‡∏Ç‡∏≠‡∏á Priority
        priorityFilter.addEventListener('change', () => {
            const priorityValue = priorityFilter.value;
            if (priorityValue) {
                fetchAndRenderTasks(`/tasks/filter?priority=${priorityValue}`);
            } else {
                location.reload();
            }
        });

        /**
         * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏¥‡∏á API ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
         */
        async function fetchAndRenderTasks(url) {
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Failed to fetch tasks.');

                const tasks = await response.json();
                const todoListBody = document.getElementById('todo-list-body');
                const completedListBody = document.getElementById('completed-list-body');

                todoListBody.innerHTML = '';
                completedListBody.innerHTML = '';

                const todoTasks = tasks.filter(t => t.status !== 'COMPLETED');
                const completedTasks = tasks.filter(t => t.status === 'COMPLETED');

                if (todoTasks.length === 0 && completedTasks.length === 0) {
                    todoListBody.innerHTML = '<div class="empty-task">No tasks found matching your criteria.</div>';
                } else if (todoTasks.length > 0) {
                    todoTasks.forEach(task => todoListBody.appendChild(createTaskElement(task)));
                }

                if (completedTasks.length === 0) {
                    completedListBody.innerHTML = '<div class="empty-task small">No completed tasks found.</div>';
                } else {
                    completedTasks.forEach(task => completedListBody.appendChild(createTaskElement(task)));
                }

                if (window.FontAwesome) FontAwesome.dom.i2svg();
            } catch (error) {
                console.error(error);
                alert(error.message);
            }
        }


    });
</script>